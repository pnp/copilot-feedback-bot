# Define environment specific variables and services in the override file. docker-compose.override.yml isn't git tracked.
services:
  copilotbot-web:
    # Environment vars are only needed if you want to run the solution in docker-compose locally
    environment:
      - ASPNETCORE_URLS=http://+:80
      - MicrosoftAppPassword=
      - MicrosoftAppId=
      - ConnectionStrings__Storage=
      - ConnectionStrings__SQL=
      - ConnectionStrings__ServiceBusRoot=
      - ConnectionStrings__Redis=
      - AuthConfig__TenantId=
      - AuthConfig__ClientSecret=
      - AuthConfig__ClientId=
      - AuthConfig__ApiAudience=
      - AuthConfig__Authority=https://login.microsoftonline.com/organizations
      - AppCatalogTeamAppId=
    build:
      args:
      # These arguments are used to build the JavaScript application bundle
      - VITE_MSAL_CLIENT_ID=
      - VITE_MSAL_AUTHORITY=https://login.microsoftonline.com/organizations
      - VITE_MSAL_SCOPES=
      - VITE_TEAMSFX_START_LOGIN_PAGE_URL=
      - VITE_API_ENDPOINT=
    depends_on:
      sql:
        condition: service_healthy
      azurite:
        condition: service_started
      redis:
        condition: service_started

  copilotbot-functions:
    # Environment vars are only needed if you want to run the solution in docker-compose locally
    environment:
      - ASPNETCORE_URLS=http://+:80
      - MicrosoftAppPassword=
      - MicrosoftAppId=
      - ConnectionStrings__Storage=
      - ConnectionStrings__SQL=
      - ConnectionStrings__ServiceBusRoot=
      - ConnectionStrings__Redis=
      - AuthConfig__TenantId=
      - AuthConfig__ClientSecret=
      - AuthConfig__ClientId=
      - AuthConfig__ApiAudience=
      - AuthConfig__Authority=https://login.microsoftonline.com/organizations
      - AppCatalogTeamAppId=
    depends_on:
      sql:
        condition: service_healthy
      azurite:
        condition: service_started
      redis:
        condition: service_started

# If you want to run docker locally, include the following services for testing
  sql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment: 
      ACCEPT_EULA: "Y" 
      MSSQL_SA_PASSWORD: "DevStrong@Passw0rd"
    ports: 
      - "1433:1433" 
    container_name: sql
    healthcheck:    # Mark service as healthy when the following SQL command works 
      test: /opt/mssql-tools18/bin/sqlcmd -U sa -P "DevStrong@Passw0rd" -C -Q "SELECT 1" -b -o /dev/null
      start_period: 10s
      timeout: 2s
      interval: 30s
      retries: 3
    # Connection string will be: sql;Database=CopilotDev;User Id=sa;Password=DevStrong@Passw0rd;Trusted_Connection=False;TrustServerCertificate=True;
    
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    # Connection string will be: AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
  redis:
    image: redis:latest
    container_name: redis-dev
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    # Connection string will be: redis://redis:6379
